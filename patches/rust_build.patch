@@ -94,7 +94,7 @@
 
 CLANG_SCRIPTS_DIR = os.path.join(CHROMIUM_DIR, 'tools', 'clang', 'scripts')
 
-RUST_GIT_URL = ('https://chromium.9oo91esource.qjz9zk/external/' +
+RUST_GIT_URL = ('https://' +
                 'github.com/rust-lang/rust')
 
 RUST_SRC_DIR = os.path.join(THIRD_PARTY_DIR, 'rust-src')
@@ -215,11 +215,11 @@
     # Pull the stage0 to find the package intended to be used to build this
     # version of the Rust compiler.
     STAGE0_JSON_URL = (
-        'https://chromium.9oo91esource.qjz9zk/external/github.com/'
-        'rust-lang/rust/+/{GIT_HASH}/src/stage0?format=TEXT')
-    base64_text = urllib.request.urlopen(
+        'https://raw.githubusercontent.com/'
+        'rust-lang/rust/{GIT_HASH}/src/stage0')
+    text = urllib.request.urlopen(
         STAGE0_JSON_URL.format(GIT_HASH=rust_git_hash)).read().decode("utf-8")
-    stage0 = base64.b64decode(base64_text).decode("utf-8")
+    stage0 = text
     lines = stage0.splitlines()
 
     # The stage0 file contains the path to all tarballs it uses binaries from.
@@ -534,6 +534,9 @@
             '--with-ml-inliner-model=',
             # Not using this in Rust yet, see also crbug.com/1476464.
             '--without-zstd',
+            '--host-cc=/usr/bin/clang',
+            '--host-cxx=/usr/bin/clang++',
+            '--use-system-cmake',
         ]
         if sys.platform.startswith('linux'):
             build_cmd.append('--without-android')
@@ -679,11 +682,11 @@
     args, rest = parser.parse_known_args()
 
     debian_sysroot = None
-    if sys.platform.startswith('linux') and not args.sync_for_gnrt:
+    #if sys.platform.startswith('linux') and not args.sync_for_gnrt:
         # Fetch sysroot we build rustc against. This ensures a minimum supported
         # host (not Chromium target). Since the rustc linux package is for
         # x86_64 only, that is the sole needed sysroot.
-        debian_sysroot = DownloadDebianSysroot('amd64', args.skip_checkout)
+    #    debian_sysroot = DownloadDebianSysroot('amd64', args.skip_checkout)
 
     # Require zlib compression.
     if sys.platform == 'win32':
@@ -700,9 +703,9 @@
     # TODO(crbug.com/40205621): OpenSSL is somehow already present on the
     # Windows builder, but we should change to using a package from 3pp when it
     # is available.
-    if (sys.platform != 'win32' and not args.sync_for_gnrt):
+    #if (sys.platform != 'win32' and not args.sync_for_gnrt):
         # Building cargo depends on OpenSSL.
-        AddOpenSSLToEnv()
+    #    AddOpenSSLToEnv()
 
     xpy = XPy(zlib_path, libxml2_dirs, debian_sysroot, args.verbose)
 
@@ -773,7 +776,7 @@
 
     BuildLLVMLibraries(args.skip_llvm_build)
 
-    AddCMakeToPath()
+    #AddCMakeToPath()
 
     # Set up config.toml in Rust source tree.
     xpy.configure()
